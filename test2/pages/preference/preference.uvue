<template>
  <view class="container">
    <view class="progress-bar">
      <!-- Progress bar showing the current step's progress -->
      <view class="progress-indicator" :style="{ width: progressWidth }"></view>
    </view>

    <!-- Conditional content display based on the step -->
    <view v-if="currentStep === 1" class="content">
      <!-- Display four lines of text -->
      <text class="line-text">高情商的你，性别是</text>
      <text class="line-text">男</text>
      <text class="line-text">女</text>
      <text class="line-text">二元性别并不能定义我</text>
    </view>

    <view v-else-if="currentStep === 2" class="content">
      <text class="question-title">生活中，你经常被以下问题所困扰（多选）</text>
      <!-- Checkbox group with change event -->
      <checkbox-group v-model="selectedProblems" @change="onProblemsChange">
        <label class="checkbox-item"><checkbox value="难回的消息" />难回的消息</label>
        <label class="checkbox-item"><checkbox value="尴尬的场景" />尴尬的场景</label>
        <label class="checkbox-item"><checkbox value="保持向同事关系" />保持向同事关系</label>
        <label class="checkbox-item"><checkbox value="与上级领导良好关系" />与上级领导良好关系</label>
        <label class="checkbox-item"><checkbox value="难以深入环境" />难以深入环境</label>
        <label class="checkbox-item"><checkbox value="困难的工作沟通" />困难的工作沟通</label>
      </checkbox-group>
    </view>

    <view v-else class="content">
      <!-- Display transition page image -->
      <view class="background-image" :style="{ backgroundImage: `url(${backgroundImage})` }"></view>
    </view>

    <!-- Bottom custom image button -->
    <image class="continue-button" src="/static/icon.png" @click="nextStep" mode="widthFix"></image>
  </view>
</template>

<script>
export default {
  data() {
    return {
      currentStep: 1,
      totalSteps: 4, // Total of four steps
      selectedGender: '', // Store the answer for the single choice question
      selectedProblems: [], // Store the answers for the multiple choice question
      genders: [ // Single choice options data
        { value: '男', label: '男' },
        { value: '女', label: '女' },
        { value: '其他', label: '二元性别并不能定义我' }
      ],
      backgroundImages: [
        '/static/过渡页pre1.png', // Background image path for the third step
        '/static/过渡页pre2.png'  // Background image path for the fourth step
      ],
      username: ''  // To store the username passed from the previous page
    };
  },
  computed: {
    progressWidth() {
      return `${(this.currentStep / this.totalSteps) * 100}%`; // Calculate the progress bar width
    },
    backgroundImage() {
      // Return the background image path based on the current step
      return this.backgroundImages[this.currentStep - 3]; // Use background images for steps 3 and 4
    },
  },
  methods: {
    nextStep() {
      if (this.currentStep === 1 && this.selectedGender === '') {
        uni.showToast({ title: '请选择性别', icon: 'none' });
        return;
      }
      if (this.currentStep === 2 && this.selectedProblems.length === 0) {
        uni.showToast({ title: '请选择至少一个选项', icon: 'none' });
        return;
      }

      if (this.currentStep < this.totalSteps) {
        this.currentStep += 1; // Switch to the next step
      } else {
        // After completing all steps, navigate to the next page and pass user information
        uni.navigateTo({
          url: `/pages/test/test?username=${this.username}&gender=${this.selectedGender}&problems=${this.selectedProblems.join(',')}`
        });
      }
    },
    selectGender(value) {
      this.selectedGender = value; // Custom method to select gender
    },
    onProblemsChange(event) {
      this.selectedProblems = event.detail.value; // Update the selected problems
    }
  },
  onLoad(options) {
    // Retrieve URL parameters
    if (options.username) {
      this.username = options.username;  // Store the passed username
    }
  }
};
</script>

<style scoped>
.container {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  height: 100vh;
  background-color: #ffffff;
  padding: 0px;
  position: relative;
}

.progress-bar {
  width: 90%;
  height: 5px;
  background-color: #e0e0e0;
  margin-bottom: 20px;
  position: absolute;
  top: 0;
  left: 5%;
}

.progress-indicator {
  height: 100%;
  background-color: #4b9eff;
  position: absolute;
  top: 0;
  left: 0;
}

.content {
  display: flex;
  flex-direction: column;
  align-items: flex-start; /* Align content to the left */
  text-align: left; /* Align text to the left */
  width: 100%;
  flex: 1;
  justify-content: center;
  margin-bottom: 250px;
}

.line-text {
  font-size: 18px;
  margin-bottom: 10px; /* Space between lines */
}

.question-title {
  font-size: 18px;
  margin-bottom: 20px;
}

.radio-group {
  width: 100%;
}

.radio-item {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 90%;
  margin: 10px auto;
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  background-color: #ffffff;
  transition: background-color 0.3s, border-color 0.3s;
  cursor: pointer; /* Show pointer cursor on hover */
}

.radio-item:hover {
  border-color: #4b9eff;
}

.radio-label {
  flex-grow: 1;
  text-align: left;
  font-size: 15px;
  padding-left: 10px;
}

.custom-radio {
  width: 20px;
  height: 20px;
  border: 2px solid #ccc;
  border-radius: 50%;
  background-color: #ffffff;
  margin-right: 10px;
  position: relative;
}

.custom-radio.selected {
  border-color: #4b9eff;
  background-color: #4b9eff;
}

.background-image {
  width: 100%;
  height: 100%;
  background-size: cover;
  background-position: center;
}

.continue-button {
  width: 13%; /* Adjust button width */
  height: 45px; /* Adjust button height */
  margin-bottom: 30px;
  position: absolute; /* Use absolute positioning */
  bottom: 0px; /* Distance from the bottom */
  left: 80%; /* Distance from the left */
  transform: translateX(-50%); /* Center horizontally */
}
</style>
