<template>
  <view class="container">
    <view class="content">
      <view class="text-content">
        <text class="question">你的性别是？</text>
        <text class="subtitle">完善个人信息</text>
      </view>

      <view class="gender-options">
        <view class="gender-option" :class="{ 'selected': selectedGender === 'male' }" @click="selectGender('male')">
          <text class="gender-icon">♂</text>
          <text class="gender-label">男生</text>
        </view>
        <view class="gender-option" :class="{ 'selected': selectedGender === 'female' }" @click="selectGender('female')">
          <text class="gender-icon">♀</text>
          <text class="gender-label">女生</text>
        </view>
        <view class="gender-option" :class="{ 'selected': selectedGender === 'other' }" @click="selectGender('other')">
          <text class="gender-icon">⚧</text>
          <text class="gender-label">其他</text>
        </view>
      </view>

      <view class="continue-button" @click="nextStep">
        <text class="arrow">→</text>
      </view>
    </view>
  </view>
</template>

<script>
export default {
  data() {
    return {
      selectedGender: null,
      userId: '',
      username: '',
    };
  },
  onLoad(options) {
    // 从路由参数中获取userId和username
    this.userId = options.userId;
    this.username = decodeURIComponent(options.username);
    console.log('User ID:', this.userId);
    console.log('Username:', this.username);
  },
  methods: {
    selectGender(gender) {
      this.selectedGender = gender;
    },
    nextStep() {
      if (this.selectedGender) {
        // 保存性别信息
        uni.setStorageSync('gender', this.selectedGender);
        // 导航到下一页，并传递所有参数
        uni.navigateTo({ 
          url: `/pages/preference/preference1?userId=${this.userId}&username=${encodeURIComponent(this.username)}&gender=${this.selectedGender}` 
        });
      } else {
        uni.showToast({ title: '请选择性别', icon: 'none' });
      }
    },
  },
};
</script>

<style scoped>
.container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
  background-color: #1c1c1e;
  padding: 40px 20px;
}

.content {
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.text-content {
  margin-bottom: 40px;
}

.question {
  font-size: 24px;
  color: #ffffff;
  margin-bottom: 8px;
}

.subtitle {
  font-size: 14px;
  color: #8e8e93;
}

.gender-options {
  display: flex;
  flex-direction: row; /* 确保横向排列 */
  justify-content: space-between; /* 均匀分布 */
  margin-top: 40px;
}

.gender-option {
  width: 30%; /* 调整宽度以适应三个选项 */
  aspect-ratio: 1; /* 保持正方形 */
  background-color: #2c2c2e;
  border-radius: 10px;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  border: 2px solid transparent;
}

.gender-option.selected {
  border-color: #30d158;
}

.gender-icon {
  font-size: 24px;
  color: #ffffff;
  margin-bottom: 5px;
}

.gender-label {
  font-size: 14px;
  color: #ffffff;
}

.continue-button {
  width: 50px;
  height: 50px;
  background-color: #30d158;
  border-radius: 25px;
  display: flex;
  justify-content: center;
  align-items: center;
  align-self: center;
  margin-top: auto;
}

.arrow {
  color: #ffffff;
  font-size: 20px;
}
</style>
