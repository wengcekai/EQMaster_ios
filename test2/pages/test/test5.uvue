<template>
  <view class="container">
    <!-- 调试信息显示区域 -->
    <!-- <view class="debug-info"> -->
      <!-- 如需调试信息，可取消注释以下行 -->
      <!-- <text>Scenario Data: {{ JSON.stringify(scenarioData) }}</text> -->
    <!-- </view> -->

    <image class="background-image" src="/static/bg1.png" mode="aspectFill" />
	<image class="logo" src="/static/sign.png" mode="aspectFit" />
	<text class="room-text">三楼电梯间</text>
	

    <!-- 包裹选项列表的容器 -->
    <view class="options-container">
      <view v-for="(option, index) in scenarioData && scenarioData.options ? scenarioData.options : []" 
            :key="index"
            :class="['text-box', { 'selected': selectedOptionIndex === index }]" 
            @click="selectOption(index)">
        <text class="text-content" :style="{ color: option.textColor || 'white' }">{{ option.text }}</text>
      </view>
    </view>

    <!-- 继续按钮 -->
    <view class="continue-button" @click="nextPage">
      <text class="arrow">→</text>
    </view>

  </view>
</template>

<script>
export default {
  data() {
    return {
      userInfoStyle: {
        bottom: '180px',
        left: '50%',
        marginLeft: '-65px' // 替换 transform
      },
      userId: '',
      username: '',
      gender: '',
      selectedOptions: [],
      birthday: null,
      scenarioData: null,
      background: '',
      description: '',
      selectedOptionIndex: null,
      num: null,
      jobId: null,
      baseURL: 'https://eqmaster.azurewebsites.net' // 请替换为您的实际后端地址
    }
  },
  onLoad(option) {
    console.log('Received options:', option);

    // 接收上一个页面传递的数据
    this.userId = option.userId || '';
    this.username = decodeURIComponent(option.username || '');
    this.gender = option.gender || '';
    this.jobId = option.jobId || '';

    if (option.options) {
      try {
        this.selectedOptions = JSON.parse(decodeURIComponent(option.options));
      } catch (e) {
        console.error('Error parsing options:', e);
        this.selectedOptions = [];
      }
    }

    if (option.birthday) {
      try {
        this.birthday = JSON.parse(decodeURIComponent(option.birthday));
      } catch (e) {
        console.error('Error parsing birthday:', e);
        this.birthday = null;
      }
    }

    console.log('Parsed data:', {
      userId: this.userId,
      username: this.username,
      gender: this.gender,
      selectedOptions: this.selectedOptions,
      birthday: this.birthday,
      jobId: this.jobId
    });

    // 发送数据到后端
    this.getScenarioData();
  },
  methods: {
    updateUserInfoPosition(x, y) {
      this.userInfoStyle.left = `${x}px`;
      this.userInfoStyle.bottom = `${y}px`;
      this.userInfoStyle.marginLeft = '0px'; // 移除居中效果
    },
    selectOption(index) {
      
	  this.selectedOptionIndex = index;
      this.num = index + 1; // 设置 num 为选项的索引 + 1
      console.log('Selected option:', this.num, this.scenarioData.options[index].text);
      
      // 更新选项文本颜色为黑色
      this.scenarioData.options.forEach((option, i) => {
        option.textColor = (i === index) ? 'black' : 'white'; // 设置选中的文本颜色为黑色
      });
    },
    navigateToTest1() {
      const testPageUrl = `/pages/test/test3?jobId=${this.jobId}&userId=${this.userId}&username=${encodeURIComponent(this.username)}&gender=${this.gender}&birthday=${encodeURIComponent(JSON.stringify(this.birthday))}&options=${encodeURIComponent(JSON.stringify(this.selectedOptions))}&num=${this.num}`;
      
      uni.navigateTo({
        url: testPageUrl
      });
    },
    nextPage() {
      if (this.num === null) {
        uni.showToast({
          title: '请选择一个选项',
          icon: 'none'
        });
        return;
      }

      console.log('Sending data to backend:', {
        choice: this.num,
        job_id: this.jobId
      });

      uni.request({
        url: `${this.baseURL}/choose_scenario`,
        method: 'POST',
        data: {
          choice: this.num,
          job_id: this.jobId
        },
        success: (response) => {
          console.log('Full response:', response);

          if (response.statusCode === 200) {
            const result = response.data;
            console.log('Response data:', result);

            let nextPageUrl;
            if (result.message === "Final choice made. Processing data in background.") {
              nextPageUrl = `/pages/result/result?jobId=${this.jobId}&userId=${this.userId}&username=${encodeURIComponent(this.username)}&gender=${this.gender}&birthday=${encodeURIComponent(JSON.stringify(this.birthday))}&options=${encodeURIComponent(JSON.stringify(this.selectedOptions))}&num=${this.num}`;
            } else {
              nextPageUrl = `/pages/test/test3?jobId=${this.jobId}&userId=${this.userId}&username=${encodeURIComponent(this.username)}&gender=${this.gender}&birthday=${encodeURIComponent(JSON.stringify(this.birthday))}&options=${encodeURIComponent(JSON.stringify(this.selectedOptions))}&num=${this.num}`;
            }

            console.log('Navigating to:', nextPageUrl);

            uni.navigateTo({
              url: nextPageUrl,
              fail: (err) => {
                console.error('Navigation failed:', err);
                uni.showToast({
                  title: '页面跳转失败',
                  icon: 'none'
                });
              }
            });
          } else {
            uni.showToast({
              title: `请求失败，状态码：${response.statusCode}`,
              icon: 'none'
            });
          }
        },
        fail: (error) => {
          console.error('Detailed error:', error);
          uni.showToast({
            title: `发生错误：${error.errMsg}`,
            icon: 'none'
          });
        }
      });
    },
    getScenarioData() {
      uni.request({
        url: `${this.baseURL}/get_current_scenario/${this.jobId}`,
        method: 'POST',
        success: (res) => {
          console.log('Scenario data:', res.data);
          // 根据返回的数据结构调整
          this.scenarioData = res.data.scenes || res.data;
          this.handleScenarioData();
        },
        fail: (err) => {
          console.error('Error getting scenario data:', err);
        }
      });
    },
    handleScenarioData() {
      if (this.scenarioData) {
        this.description = this.scenarioData.description || '无法获取背景信息';
      } else {
        console.warn('Background information not found in scenario data');
        this.description = '无法获取背景信息';
      }
    }
  }
}
</script>

<style scoped>
.container {
  position: relative;
  width: 100%;
  height: 100%; /* 改为100% */
}

.background-image {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

.room-info {
  position: absolute;
  top: 40px;
  left: 50%;
  margin-left: -70px; /* 替换 transform */
  background-color: rgba(55, 55, 66, 0.4);
  border-radius: 20px;
  padding: 12px 10px;
  width: 140px;
  box-sizing: border-box;
}

.room-text {
  color: #ffffff;
  font-size: 32rpx;
  text-align: center;
  /* padding-right: 20rpx; */
  top:10.5%;
  
}

.gray-circle {
  position: absolute;
  width: 35px;
  height: 35px;
  background-color: #373742;
  border-radius: 50%;
  top: 61px;
  left: 130px;
  display: flex;
  justify-content: center;
  align-items: center;
}

.logo {
  width: 300rpx; 
  height: 300rpx;
  position: absolute;
  top: 11%;
  left: 50%;
  transform: translate(-50%, -50%); /* 同时水平和垂直居中 */
}

.options-container {
  position: absolute;
  top: 500px; /* 根据需要调整位置 */
  left: 0;
  right: 0;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 30px; /* 选项之间的间距 */
}

.text-box {
  width: 80%; /* 或者据需要设置固定宽度 */
  background-color: rgba(55, 55, 66, 0.8);
  border-radius: 50px;
  padding: 15px 25px;
  min-height: 50px;
  max-height: 200px;
  overflow: auto;
  transition: background-color 0.3s;
    margin-bottom: 20px; /* 设置选项之间的间距 */
}

.text-content {
  color: white;
  font-size: 14px;
  line-height: 1.4;
}

.selected .text-content {
  color: black; /* 选中后文本变红 */
}
 
.text-box.selected {
  background-color: #F6ECC9;
}

.continue-button {
  position: absolute;
  bottom: 20px;
  left: 50%;
  margin-left: -30px;
  background-color: #F2BC74;
  border-radius: 30px;
  -webkit-border-radius: 30px;
  width: 60px;
  height: 60px;
  display: flex;
  justify-content: center;
  align-items: center;
  color: white;
  font-size: 24px;
  text-align: center;
  z-index: 1;
  box-sizing: border-box;
}



.arrow {
  color: #ffffff;
}

.debug-info {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 5px;
  font-size: 10px;
  z-index: 100;
  max-height: 50vh;
  overflow-y: auto;
}

.debug-info text {
  display: block;
  margin-bottom: 2px;
}
</style>
