<template>
  <view class="container">
	  <view class="debug-info">
	    <text>User ID: {{ userId }}</text>
	    <!-- <text>Username: {{ username }}</text> -->
	    <text>Gender: {{ gender }}</text> -->
	    <text>Selected Options: {{ selectedOptions.join(', ') }}</text>
	    <!-- <text>Number of Selected Options: {{ selectedOptions.length }}</text>
	    <!-- <text>Birthday: {{ birthday ? JSON.stringify(birthday) : '未设置' }}</text> -->
	    <text>homepageData: {{ JSON.stringify(homepageData,response) }}</text>
	    <!-- <text>Background: {{ background }}</text> -->
	  </view>
	  
    <text class="score-title-head">我的检测结果</text>
    <!-- 背景和弧线 -->
    <view class="background-curve"></view>
    <!-- 添加插图 -->
    <image class="illustration1" src="/static/img1.png" mode="widthFix"></image>

    <!-- 添加白色卡片 -->
    <view class="card">
      <!-- 标题和分数显示 -->
      <view class="score-container">
        <text class="score-title">情商小白</text>
        <view class="score-details">
          <text class="score-value-large">{{ homepageData.response.eq_scores.score }}</text>
          <text class="score-value-small">分</text>
        </view>
        <!-- 进度条 -->
        <view class="progress-bar">
          <view class="progress" :style="{ width: progressWidth(score) }"></view>
        </view>
      </view>

      <!-- 五维雷达图 -->
      <canvas id="radarCanvas" class="radar-canvas" width="500" height="500"></canvas>

      <view class="text-box1">
        <text class="card-title1">问题诊断</text>
      </view>

      <view class="card-content">
        <!-- 插图或图标 -->
        <image class="emoji" src="/static/emoji.png" mode="widthFix"></image>
        <!-- 文字内容 -->
        <view class="card-text-container">
          <!-- 文字内容框和插图在同一行 -->
          <view class="icon-text-box">
            <!-- 插图或图标 -->
            <!-- <image class="icon-illustration" src="/static/Frame 1321316998.png" mode="widthFix"></image> -->
            <!-- 文字内容框 -->
            <view class="text-box">
              <text class="card-title">{{ homepageData.response.eq_scores.summary }}</text>
            </view>
          </view>

          <text class="card-description">{{ homepageData.response.eq_scores.overall_suggestion }}</text>
        </view>
      </view>
    </view>

    <!-- 添加白色卡片1 -->
    <view class="card1">
      <view class="text-box1">
        <text class="card-title1">提升秘诀</text>
      </view>

      <view class="card-content">
        <!-- 插图或图标 -->
        <image class="emoji" src="/static/emoji.png" mode="widthFix"></image>
        <!-- 文字内容 -->
        <view class="card-text-container">
          <!-- 文字内容框和插图在同一行 -->
          <view class="icon-text-box">
            <!-- 插图或图标 -->
            <!-- <image class="icon-illustration" src="/static/Frame 1321316998.png" mode="widthFix"></image> -->
            
            <!-- 文字内容框 -->
            <view class="text-box">
              <text class="card-title">{{ homepageData.response.eq_scores.summary }}</text>
            </view>
          </view>

          <text class="card-description">{{ homepageData.response.eq_scores.detail }}</text>
          <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->
        </view>
      </view>
    </view>

    <!-- 添加白色卡片2 -->
    <view class="card2">
      <view class="text-box1">
        <text class="card-title1">详细报告</text>
      </view>

      <!-- 维度一 -->
      <view class="score-container">
        <text class="score-title1">维度名称一</text>
        <!-- 进度条 -->
        <view class="progress-bar1">
          <view class="progress" :style="{ width: progressWidth(homepageData.response.eq_scores.dimension1_score) }"></view>
        </view>
        <text class="score-title1">{{ homepageData.response.eq_scores.dimension1_score }}%</text>
      </view>

      <text class="card-description">{{ homepageData.response.eq_scores.dimension1_detail }}</text>
      <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->

      <!-- 维度二 -->
      <view class="score-container1">
        <text class="score-title1">维度名称二</text>
        <!-- 进度条 -->
        <view class="progress-bar1">
          <view class="progress" :style="{ width: progressWidth(homepageData.response.eq_scores.dimension2_score) }"></view>
        </view>
        <text class="score-title1">{{ homepageData.response.eq_scores.dimension2_score }}%</text>
      </view>

      <text class="card-description">{{ homepageData.response.eq_scores.dimension2_detail }}</text>
      <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->

      <!-- 维度三 -->
      <view class="score-container1">
        <text class="score-title1">维度名称三</text>
        <!-- 进度条 -->
        <view class="progress-bar1">
          <view class="progress" :style="{ width: progressWidth(homepageData.response.eq_scores.dimension3_score) }"></view> <!-- 根据51%的数值动态变化 -->
        </view>
        <text class="score-title1">{{ homepageData.response.eq_scores.dimension3_score }}%</text>
      </view>

      <text class="card-description">{{ homepageData.response.eq_scores.dimension3_detail }}</text>
      <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->

      <!-- 维度四 -->
      <view class="score-container1">
        <text class="score-title1">维度名称四</text>
        <!-- 进度条 -->
        <view class="progress-bar1">
          <view class="progress" :style="{ width: progressWidth(homepageData.response.eq_scores.dimension4_score) }"></view> <!-- 根据33%的数值动态变化 -->
        </view>
        <text class="score-title1">{{ homepageData.response.eq_scores.dimension4_score }}%</text>
      </view>

      <text class="card-description">{{ homepageData.response.eq_scores.dimension4_detail }}</text>
      <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->

      <!-- 维度五 -->
      <view class="score-container1">
        <text class="score-title1">维度名称五</text>
        <!-- 进度条 -->
        <view class="progress-bar1">
          <view class="progress" :style="{ width: progressWidth(homepageData.response.eq_scores.dimension5_score) }"></view> <!-- 根据61%的数值动态变化 -->
        </view>
        <text class="score-title1">{{ homepageData.response.eq_scores.dimension5_score }}%</text>
      </view>

      <text class="card-description">{{ homepageData.response.eq_scores.dimension5_detail }}</text>
      <!-- <text class="card-description">处理冲突时，保持和平理性，避免带刺的言辞，一起寻找双赢的解决办法。</text> -->
    </view>

    <!-- 添加蓝色按钮 -->
    <button class="guide-button" @click="navigateToGuide">开启高情商之旅</button>
  </view>
</template>

<style scoped>
.container {
  width: 100%;
  height: 100vh;
  position: relative;
  background-color: #2F2F38;
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow-y: auto; /* Allow vertical scrolling */
  padding-top: 60rpx; /* Add top padding */
}

.background-curve {
  width: 200%;
  height: 500rpx;
  background-color: #2F2F38;
  border-radius: 70%;
  position: absolute;
  top: -100rpx;
  left: -300px;
  transform: rotate(35deg);
  z-index: 5; /* Lower z-index to be below the text */
}

.illustration1 {
  width: 700rpx;
  height: auto;
  position: relative;
  z-index: 10;
  top: -5%;
  left: -3%;
  margin-top: 80rpx;
  margin-bottom: 0rpx;
}

.card, .card1, .card2 {
  width: 95%;
  height: auto;
  background-color: #373742;
  border-radius: 20rpx;
  box-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.1);
  position: relative;
  z-index: 20;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 60rpx 30rpx 0rpx 30rpx;
}

.card {
  top: -5%;
}

.card1 {
  top: -3.5%;
}

.card2 {
  top: -2%;
  padding-bottom: 20rpx;
}

.score-container, .score-container1 {
  width: 100%;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin-bottom: 10rpx;
}

.score-container1 {
  margin-top: 100rpx;
}


.score-title-head {
  font-size: 40rpx;
  font-weight: bold;
  color: #FFFFFF;
  margin-bottom: 5rpx;
  position: relative; /* Add relative positioning */
  z-index: 30; /* Ensure it's above other elements */
}

.score-title {
  font-size: 40rpx;
  font-weight: bold;
  color: #9EE44D;
  margin-bottom: 5rpx;
  position: relative; /* Add relative positioning */
  z-index: 30; /* Ensure it's above other elements */
}

.score-title1 {
  font-size: 36rpx;
  color: #FFFFFF;
  margin-bottom: 5rpx;
}

.score-details {
  display: flex;
  align-items: baseline;
  margin-bottom: 10rpx;
  width: 100%;
}

.score-value-large {
  font-size: 80rpx;
  font-weight: bold;
  color: #9EE44D;
  margin-right: 5rpx;
}

.score-value-small {
  font-size: 40rpx;
  font-weight: normal;
  color: #9EE44D;
  position: absolute;
  top: 40rpx;
  left: 100rpx;
}

.progress-bar, .progress-bar1 {
  width: 100%;
  height: 10rpx;
  background-color: #E5E5E5;
  border-radius: 5rpx;
  overflow: hidden;
  margin-top: 5rpx;
}

.progress-bar1 {
  margin: 15rpx 5rpx;
}

.progress {
  height: 100%;
  background-color: #9EE44D;
}

.radar-canvas {
  width: 700rpx;
  height: 500rpx;
  margin: 10rpx;
  background-color: transparent;
}

.card-content {
  display: flex;
  align-items: center;
  justify-content: flex-start;
}

.emoji {
  width: 60rpx;
  height: auto;
  margin-right: 10rpx;
}

.card-text-container {
  display: flex;
  align-items: left;
  justify-content: flex-start;
  margin-bottom: 20rpx;
}

.icon-text-box {
  display: flex;
  align-items: center;
}

.icon-illustration {
  width: 60rpx;
  height: auto;
  position: absolute;
  top: 0%;
  left: 0%;
  margin-right: 10rpx;
}

.text-box, .text-box1 {
  display: inline-flex;
  align-items: center;
  border: 1rpx solid #373742;
  padding: 5rpx 10rpx;
  border-radius: 10rpx;
  background-color: #373742;
  box-shadow: 0 0 12rpx 0rpx rgba(0, 0, 0, 0.3);
  margin: 10rpx;
}

.text-box1 {
  padding: 10rpx;
  box-shadow: 0 0 0rpx 0rpx rgba(0, 0, 0, 0.3);
  margin: 0rpx 10rpx 10rpx 10rpx;
}

.card-title {
  font-size: 28rpx;
  color: #252529; 
  background-color: #EDFB8B;
  margin-bottom: 10rpx;
}

.card-title1 {
  font-size: 32rpx;
  color: #FFFFFF;
  font-weight: bold;
  margin-bottom: 10rpx;
  top: -10%;
}

.card-description {
  font-size: 32rpx;
  color: #FFFFFF;
  line-height: 1.5;
  margin-top: 10rpx;
}

.guide-button {
  width: 90%;
  height: 100rpx;
  background-color: #9EE44D;
  color: #252529;
  font-size: 36rpx;
  border-radius: 50rpx;
  text-align: center;
  line-height: 100rpx;
  display: flex;
  justify-content: center;
  align-items: center;
  margin-bottom: 30rpx;
}

.debug-info {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  padding: 5px;
  font-size: 10px;
  z-index: 100;
  max-height: 50vh;
  overflow-y: auto;
}

.debug-info text {
  display: block;
  margin-bottom: 2px;
}

.text-box {
  background-color: #EDFB8B; /* 浅黄色背景 */
  border-radius: 20rpx; /* 圆角 */
  padding: 20rpx 30rpx; /* 内边距 */
  display: inline-block; /* 使框的大小适应内容 */
  box-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.1); /* 轻微阴影效果 */
}

.card-title {
  color: #252529; /* 深色文字 */
  font-size: 28rpx;
  font-weight: bold;
  line-height: 1.4; /* 调整行高以改善可读性 */
}

</style>

<script>
export default {
  data() {
    return {
      score: 28, // Example score, can be dynamically changed
      maxScore: 100, // Assuming max score is 100
      userId: '',
      username: '',
      gender: '',
      birthday: null,
      selectedOptions: [],
      jobId: null,
      num: null,
      homepageData: {
        personal_info: {
          name: '',
          tag: '',
          tag_description: '',
          job_id: ''
        },
        eq_scores: {
          score: null,
          dimension1_score: null,
          dimension1_detail: '',
          dimension2_score: null,
          dimension2_detail: '',
          dimension3_score: null,
          dimension3_detail: '',
          dimension4_score: null,
          dimension4_detail: '',
          dimension5_score: null,
          dimension5_detail: '',
          summary: '',
          detail: '',
          overall_suggestion: ''
        },
        contacts: []
      },
      intervalId: null,
    };
  },
  computed: {
    formattedBirthday() {
      if (this.birthday) {
        const date = new Date(this.birthday.year, this.birthday.month - 1, this.birthday.day);
        return date.toLocaleDateString();
      }
      return '未设置';
    },
  },
  onLoad(option) {
    console.log('Received options:', option);

    // 接收上一个页面传递的数据
    this.userId = option.userId || '';
    this.username = decodeURIComponent(option.username || '');
    this.gender = option.gender || '';
    this.jobId = option.jobId || '';
    this.num = option.num || '';

    if (option.options) {
      try {
        this.selectedOptions = JSON.parse(decodeURIComponent(option.options));
      } catch (e) {
        console.error('Error parsing options:', e);
        this.selectedOptions = [];
      }
    }

    if (option.birthday) {
      try {
        this.birthday = JSON.parse(decodeURIComponent(option.birthday));
      } catch (e) {
        console.error('Error parsing birthday:', e);
        this.birthday = null;
      }
    }

    console.log('Parsed data:', {
      userId: this.userId,
      username: this.username,
      gender: this.gender,
      selectedOptions: this.selectedOptions,
      birthday: this.birthday,
      jobId: this.jobId,
      num: this.num,
    });

    // 立即调用一次
    this.getHomepageData();

    // 设置定���调用
    this.intervalId = setInterval(() => {
      this.getHomepageData();
    }, 50000); // 每50秒调用一次
  },
  onUnload() {
    // 页面卸载时清除定时器
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
  },
  mounted() {
    this.drawRadar();
  },
  methods: {
    progressWidth(value) {
      // Calculate progress bar width percentage
      const percentage = (value / this.maxScore) * 100;
      return `${percentage}%`;
    },
    drawRadar() {
      const canvas = document.getElementById('radarCanvas');
      if (!canvas) return;
      const radarCtx = canvas.getContext('2d');

      // Control center point and radius
      const center = { x: 150, y: 70 }; // Adjust y value to avoid being covered
      const radius = 50;

      // Control scale on x and y axes
      const scaleX = 1.7; // Scale x-axis by 1.5
      const scaleY = 1.2;   // Keep y-axis scale as is

      const data = [
        {
          subject: '维度1',
          A: this.homepageData.response.eq_scores.dimension1_score,
          fullMark: 100,
        },
        {
          subject: '维度2',
          A: this.homepageData.response.eq_scores.dimension2_score,
          fullMark: 100,
        },
        {
          subject: '维度3',
          A: this.homepageData.response.eq_scores.dimension3_score,
          fullMark: 100,
        },
        {
          subject: '维度4',
          A: this.homepageData.response.eq_scores.dimension4_score,
          fullMark: 100,
        },
        {
          subject: '维度5',
          A: this.homepageData.response.eq_scores.dimension5_score,
          fullMark: 100,
        },
      ];

      const labels = ['', '', '', '', ''];

      // Draw polygon grid, draw only 2 layers
      radarCtx.strokeStyle = '#E5E5E5'; // Light blue lines
      radarCtx.lineWidth = 0.5;
      for (let i = 0; i <= 1; i++) {
        radarCtx.beginPath();
        for (let j = 0; j < 5; j++) {
          const angle = (Math.PI / 2 + (2 * Math.PI * j) / 5);
          const x = center.x + scaleX * (radius * (2 - i) / 2) * Math.cos(angle);
          const y = center.y - scaleY * (radius * (2 - i) / 2) * Math.sin(angle);
          radarCtx.lineTo(x, y);
        }
        radarCtx.closePath();
        radarCtx.stroke();
      }

      // Draw radial lines from center to each vertex
      radarCtx.strokeStyle = '#E5E5E5'; // Light blue lines, semi-transparent
      radarCtx.lineWidth = 0.5;
      for (let j = 0; j < 5; j++) {
        radarCtx.beginPath();
        const angle = (Math.PI / 2 + (2 * Math.PI * j) / 5);
        const x = center.x + scaleX * radius * Math.cos(angle);
        const y = center.y - scaleY * radius * Math.sin(angle);
        radarCtx.moveTo(center.x, center.y); // Move to center
        radarCtx.lineTo(x, y); // Draw line to each vertex
        radarCtx.stroke();
      }

      // Draw data polygon
      radarCtx.fillStyle = 'rgba(158, 228, 77, 0.3)'; // Use semi-transparent #757CE0 color
      radarCtx.strokeStyle = 'rgba(158, 228, 77, 0.8)'; // Use deeper semi-transparent color for border
      radarCtx.lineWidth = 1;
      radarCtx.beginPath();
      for (let i = 0; i < 5; i++) {
        const angle = (Math.PI / 2 + (2 * Math.PI * i) / 5);
        const x = center.x + scaleX * (radius * data[i].A / 100) * Math.cos(angle);
        const y = center.y - scaleY * (radius * data[i].A / 100) * Math.sin(angle);
        radarCtx.lineTo(x, y);
      }
      radarCtx.closePath();
      radarCtx.fill();   // Fill polygon
      radarCtx.stroke(); // Draw border

      // Draw labels
      radarCtx.fillStyle = '#666666'; // Gray text
      radarCtx.font = '14px Arial';
      labels.forEach((label, i) => {
        const angle = (Math.PI / 2 + (2 * Math.PI * i) / 5);
        const x = center.x + scaleX * (radius + 20) * Math.cos(angle);
        const y = center.y - scaleY * (radius + 20) * Math.sin(angle);
        radarCtx.fillText(label, x - 20, y + 5);
      });
    },
    navigateToGuide() {
      // Use Uniapp's navigation method
      uni.navigateTo({
        url: '/pages/dashboard/dashboard' // Update the path as needed
      });
    },
    async getHomepageData() {
      try {
        const response = await uni.request({
          url: `http://10.32.69.27:8180/get_homepage/${this.jobId}`,
          method: 'GET',
        });

        if (response.statusCode === 200) {
          this.homepageData = response.data;
          console.log('Homepage data received:');
          console.log('Personal Info:', JSON.stringify(this.homepageData.personal_info, null, 2));
          console.log('EQ Scores:', JSON.stringify(this.homepageData.response.eq_scores, null, 2));
          console.log('Contacts:', JSON.stringify(this.homepageData.response.contacts, null, 2));
        } else {
          console.error('Failed to fetch homepage data:', response.statusCode);
        }
      } catch (error) {
        console.error('Error fetching homepage data:', error);
      }
    },
  }
};
</script>


