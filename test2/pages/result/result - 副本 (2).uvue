<template>
  <view class="container">
    <!-- 调试信息显示区域 -->
    <view class="debug-info">
      <!-- 如需调试信息，可取消注释以下行 -->
      <!-- <text>homepageData: {{ JSON.stringify(homepageData) }}</text> -->
    </view>
    
    <text class="score-title-head">我的检测结果</text>
    <!-- 背景和弧线 -->
    <view class="background-curve"></view>
    <!-- 添加插图 -->
    <image class="illustration1" src="/static/img1.png" mode="widthFix"></image>

    <!-- 添加白色卡片 -->
    <view class="card">
      <!-- 标题和分数显示 -->
      <view class="score-container">
        <text class="score-title">情商小白</text>
        <view class="score-details">
          <text class="score-value-large">{{ homepageData.eq_scores.score }}</text>
          <text class="score-value-small">分</text>
        </view>
        <!-- 进度条 -->
        <view class="progress-bar">
          <view class="progress" :style="{ width: progressWidth(homepageData.eq_scores.score) }"></view>
        </view>
      </view>

      <!-- 五维雷达图 -->
      <canvas canvas-id="radarCanvas" class="radar-canvas" style="width: 500rpx; height: 500rpx;"></canvas>

      <!-- 情绪侦查力等标签 -->
      <view class="emotion-detection-box1">
        <text class="emotion-detection-title">情绪侦查力</text>
      </view>
      <!-- 其他标签同理，省略... -->

      <!-- 问题诊断 -->
      <view class="text-box1">
        <text class="card-title1">问题诊断</text>
      </view>

      <view class="card-content">
        <!-- 插图或图标 -->
        <image class="emoji" src="/static/emoji.png" mode="widthFix"></image>
        <!-- 文字内容 -->
        <view class="card-text-container">
          <view class="icon-text-box">
            <view class="text-box">
              <text class="card-title">{{ homepageData.eq_scores.summary }}</text>
            </view>
          </view>

          <text class="card-description">{{ homepageData.eq_scores.overall_suggestion }}</text>
        </view>
      </view>
    </view>

    <!-- 其他卡片同理，省略... -->

    <!-- 添加蓝色按钮 -->
    <button class="guide-button" @click="navigateToGuide">开启高情商之旅</button>
  </view>
</template>

<style scoped>
.container {
  width: 100%;
  height: 100%;
  position: relative;
  background-color: #2F2F38;
  display: flex;
  flex-direction: column;
  align-items: center;
  overflow-y: auto;
  padding-top: 60rpx;
}

/* 其他样式保持不变或根据需要调整 */
</style>

<script>
export default {
  data() {
    return {
      score: 28, // 示例分数，可根据需要动态更改
      maxScore: 100, // 假设最大分数为100
      userId: '',
      username: '',
      gender: '',
      birthday: null,
      selectedOptions: [],
      jobId: null,
      num: null,
      homepageData: {
        personal_info: {
          name: '',
          tag: '',
          tag_description: '',
          job_id: ''
        },
        eq_scores: {
          score: null,
          dimension1_score: null,
          dimension1_detail: '',
          dimension2_score: null,
          dimension2_detail: '',
          dimension3_score: null,
          dimension3_detail: '',
          dimension4_score: null,
          dimension4_detail: '',
          dimension5_score: null,
          dimension5_detail: '',
          summary: '',
          detail: '',
          overall_suggestion: ''
        },
        contacts: []
      },
      intervalId: null,
    };
  },
  computed: {
    formattedBirthday() {
      if (this.birthday) {
        const date = new Date(this.birthday.year, this.birthday.month - 1, this.birthday.day);
        return date.toLocaleDateString();
      }
      return '未设置';
    },
  },
  onLoad(option) {
    console.log('Received options:', option);

    // 接收上一个页面传递的数据
    this.userId = option.userId || '';
    this.username = decodeURIComponent(option.username || '');
    this.gender = option.gender || '';
    this.jobId = option.jobId || '';
    this.num = option.num || '';

    if (option.options) {
      try {
        this.selectedOptions = JSON.parse(decodeURIComponent(option.options));
      } catch (e) {
        console.error('Error parsing options:', e);
        this.selectedOptions = [];
      }
    }

    if (option.birthday) {
      try {
        this.birthday = JSON.parse(decodeURIComponent(option.birthday));
      } catch (e) {
        console.error('Error parsing birthday:', e);
        this.birthday = null;
      }
    }

    console.log('Parsed data:', {
      userId: this.userId,
      username: this.username,
      gender: this.gender,
      selectedOptions: this.selectedOptions,
      birthday: this.birthday,
      jobId: this.jobId,
      num: this.num,
    });

    // 立即调用一次
    this.getHomepageData();

    // 设置定时调用
    this.intervalId = setInterval(() => {
      this.getHomepageData();
    }, 50000); // 每50秒调用一次
  },
  onUnload() {
    // 页面卸载时清除定时器
    if (this.intervalId) {
      clearInterval(this.intervalId);
    }
  },
  methods: {
    progressWidth(value) {
      // 计算进度条宽度百分比
      const percentage = (value / this.maxScore) * 100;
      return `${percentage}%`;
    },
    drawRadar() {
      console.log('Drawing radar chart');
      const query = uni.createSelectorQuery().in(this);
      query.select('#radarCanvas')
        .fields({ node: true, size: true })
        .exec((res) => {
          if (!res[0]) {
            console.error('Canvas element not found');
            return;
          }
          const canvas = res[0].node;
          const radarCtx = canvas.getContext('2d');
          if (!radarCtx) {
            console.error('Unable to get 2D context');
            return;
          }

          // 清除之前的绘制内容
          radarCtx.clearRect(0, 0, canvas.width, canvas.height);

          // 控制中心点和半径
          const center = { x: canvas.width / 2, y: canvas.height / 2 };
          const radius = Math.min(canvas.width, canvas.height) / 2 - 20;

          // 数据处理
          const data = [
            {
              subject: '维度1',
              A: this.homepageData.eq_scores.dimension1_score || 0,
              fullMark: 100,
            },
            // 其他维度同理，省略...
          ];

          // 绘制雷达图逻辑
          // ...（绘制代码保持不变或根据需要调整）
        });
    },
    navigateToGuide() {
      // 使用 uni-app 的导航方法
      uni.navigateTo({
        url: '/pages/dashboard/dashboard' // 根据需要更新路径
      });
    },
    getHomepageData() {
      uni.request({
        url: `https://your-backend-url.com/get_homepage/${this.jobId}`,
        method: 'POST',
        success: (response) => {
          if (response.statusCode === 200) {
            this.homepageData = response.data;
            console.log('Homepage data received:', this.homepageData);
            // 数据加载完成后调用 drawRadar
            this.$nextTick(() => {
              this.drawRadar();
            });
          } else {
            console.error('Failed to fetch homepage data:', response.statusCode);
          }
        },
        fail: (error) => {
          console.error('Error fetching homepage data:', error);
        }
      });
    },
  }
};
</script>

